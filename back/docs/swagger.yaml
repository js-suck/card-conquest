basePath: /api/v1
definitions:
  errors.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  handlers.GameWithTrendy:
    properties:
      allGames:
        items:
          $ref: '#/definitions/models.GameRead'
        type: array
      trendyGames:
        items:
          $ref: '#/definitions/models.GameRead'
        type: array
    type: object
  models.CreateTagPayload:
    properties:
      label:
        type: string
    required:
    - label
    type: object
  models.Game:
    properties:
      created_at:
        type: string
      id:
        type: integer
      media:
        $ref: '#/definitions/models.Media'
      media_id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.GameRead:
    properties:
      id:
        type: integer
      media:
        $ref: '#/definitions/models.Media'
      name:
        type: string
    type: object
  models.GameScore:
    properties:
      created_at:
        type: string
      game_id:
        type: integer
      id:
        type: integer
      score:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Guild:
    properties:
      admins:
        items:
          $ref: '#/definitions/models.User'
        type: array
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      media:
        $ref: '#/definitions/models.Media'
      media_id:
        type: integer
      name:
        type: string
      players:
        items:
          $ref: '#/definitions/models.User'
        type: array
      updated_at:
        type: string
    type: object
  models.GuildRead:
    properties:
      description:
        type: string
      id:
        type: integer
      media:
        $ref: '#/definitions/models.MediaModel'
      name:
        type: string
      players:
        items:
          $ref: '#/definitions/models.UserReadWithImage'
        type: array
    type: object
  models.LoginPayload:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Match:
    properties:
      created_at:
        type: string
      endTime:
        type: string
      id:
        type: integer
      location:
        type: string
      matchPosition:
        type: integer
      playerOne:
        $ref: '#/definitions/models.User'
      playerOneID:
        type: integer
      playerTwo:
        $ref: '#/definitions/models.User'
      playerTwoID:
        type: integer
      scores:
        items:
          $ref: '#/definitions/models.Score'
        type: array
      startTime:
        type: string
      status:
        type: string
      tournament:
        $ref: '#/definitions/models.Tournament'
      tournamentID:
        type: integer
      tournamentStep:
        $ref: '#/definitions/models.TournamentStep'
      tournamentStepID:
        type: integer
      updated_at:
        type: string
      winner:
        $ref: '#/definitions/models.User'
      winnerID:
        type: integer
    required:
    - status
    type: object
  models.Media:
    properties:
      created_at:
        type: string
      file_extension:
        type: string
      file_name:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
  models.MediaModel:
    properties:
      media:
        $ref: '#/definitions/models.Media'
      media_id:
        type: integer
    type: object
  models.NewUserPayload:
    properties:
      address:
        example: 1234 street
        type: string
      email:
        type: string
      password:
        example: password
        type: string
      phone:
        example: "1234567890"
        type: string
      username:
        example: username
        type: string
    type: object
  models.Score:
    properties:
      created_at:
        type: string
      id:
        type: integer
      match:
        $ref: '#/definitions/models.Match'
      matchID:
        type: integer
      player:
        $ref: '#/definitions/models.User'
      playerID:
        type: integer
      score:
        type: integer
      updated_at:
        type: string
    type: object
  models.Tag:
    properties:
      created_at:
        type: string
      games:
        items:
          $ref: '#/definitions/models.Game'
        type: array
      id:
        type: integer
      name:
        type: string
      tournaments:
        items:
          $ref: '#/definitions/models.Tournament'
        type: array
      updated_at:
        type: string
    required:
    - name
    type: object
  models.Tournament:
    properties:
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      game:
        $ref: '#/definitions/models.Game'
      game_id:
        type: integer
      id:
        type: integer
      latitude:
        type: number
      location:
        type: string
      longitude:
        type: number
      maxPlayers:
        example: 32
        type: integer
      media:
        $ref: '#/definitions/models.Media'
      media_id:
        type: integer
      name:
        type: string
      organizer_id:
        type: integer
      rounds:
        type: integer
      start_date:
        type: string
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      tournament_steps:
        items:
          $ref: '#/definitions/models.TournamentStep'
        type: array
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    required:
    - description
    - end_date
    - game_id
    - maxPlayers
    - name
    - rounds
    - start_date
    type: object
  models.TournamentStep:
    properties:
      created_at:
        type: string
      id:
        type: integer
      matches:
        items:
          $ref: '#/definitions/models.Match'
        type: array
      name:
        type: string
      sequence:
        type: integer
      tournamentID:
        type: integer
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      address:
        type: string
      country:
        type: string
      created_at:
        type: string
      email:
        type: string
      fcm_token:
        type: string
      gamesScores:
        items:
          $ref: '#/definitions/models.GameScore'
        type: array
      global_score:
        type: integer
      guilds:
        items:
          $ref: '#/definitions/models.Guild'
        type: array
      id:
        type: integer
      is_verified:
        type: boolean
      matches:
        items:
          $ref: '#/definitions/models.Match'
        type: array
      media:
        $ref: '#/definitions/models.Media'
      media_id:
        type: integer
      password:
        minLength: 6
        type: string
      phone:
        type: string
      role:
        type: string
      tournaments:
        items:
          $ref: '#/definitions/models.Tournament'
        type: array
      updated_at:
        type: string
      username:
        type: string
    required:
    - password
    type: object
  models.UserGameRanking:
    properties:
      gameID:
        type: integer
      gameName:
        type: string
      rank:
        type: integer
      score:
        type: integer
      user:
        $ref: '#/definitions/models.UserReadTournament'
    type: object
  models.UserRanking:
    properties:
      rank:
        type: integer
      score:
        type: integer
      user:
        $ref: '#/definitions/models.UserReadTournament'
    type: object
  models.UserReadTournament:
    properties:
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  models.UserReadWithImage:
    properties:
      email:
        type: string
      id:
        type: integer
      media:
        $ref: '#/definitions/models.Media'
      score:
        type: integer
      username:
        type: string
    type: object
  models.UserStats:
    properties:
      email:
        type: string
      gamesRanking:
        items:
          $ref: '#/definitions/models.UserGameRanking'
        type: array
      id:
        type: integer
      rank:
        type: integer
      totalLosses:
        type: integer
      totalMatches:
        type: integer
      totalScore:
        type: integer
      totalWins:
        type: integer
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /confirm-email:
    get:
      consumes:
      - application/json
      description: Confirm email
      parameters:
      - description: Token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Confirm email
      tags:
      - Auth
  /games:
    get:
      consumes:
      - application/json
      description: Get all games. If the 'WithTrendy' query parameter is true, the
        response will be a 'GameWithTrendy' object. Otherwise, the response will be
        an array of 'models.Game'.
      parameters:
      - description: Add trendy games to the response
        in: query
        name: WithTrendy
        type: boolean
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.GameWithTrendy'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all games
      tags:
      - Game
  /games/{UserID}/rankings:
    get:
      consumes:
      - application/json
      description: Get the ranking of a user for all games
      parameters:
      - description: User ID
        in: path
        name: UserID
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get the ranking of a user for all games
      tags:
      - Game
  /guilds:
    get:
      consumes:
      - application/json
      description: Get all guilds.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GuildRead'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all guilds
      tags:
      - Guild
    post:
      consumes:
      - application/json
      description: Create a guild
      parameters:
      - description: Guild Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.Guild'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Guild'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a guild
      tags:
      - Guild
  /guilds/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a guild
      parameters:
      - description: Guild ID
        in: path
        name: id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a guild
      tags:
      - Guild
    get:
      consumes:
      - application/json
      description: Get a guild by ID
      parameters:
      - description: Guild ID
        in: path
        name: id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GuildRead'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a guild by ID
      tags:
      - Guild
    put:
      consumes:
      - application/json
      description: Update a guild
      parameters:
      - description: Guild ID
        in: path
        name: id
        required: true
        type: integer
      - description: Guild Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.Guild'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Guild'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a guild
      tags:
      - Guild
  /guilds/{id}/users/{userID}:
    delete:
      consumes:
      - application/json
      description: Remove a user from a guild
      parameters:
      - description: Guild ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove a user from a guild
      tags:
      - Guild
    post:
      consumes:
      - application/json
      description: Add a user to a guild
      parameters:
      - description: Guild ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Guild'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a user to a guild
      tags:
      - Guild
  /images:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image
      parameters:
      - description: Image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Upload an image
      tags:
      - Upload
  /login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Login
      tags:
      - Auth
  /matchs:
    get:
      consumes:
      - application/json
      description: Get all matchs.
      parameters:
      - description: Search by userID
        in: query
        name: UserID
        type: integer
      - description: Search by Status
        in: query
        name: Status
        type: string
      - description: Search by Unfinished
        in: query
        name: Unfinished
        type: boolean
      - description: Search by TournamentID
        in: query
        name: TournamentID
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all matchs
      tags:
      - Match
  /matchs/{id}:
    put:
      consumes:
      - application/json
      description: Update a match with the given ID.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Match ID
        in: path
        name: id
        required: true
        type: string
      - description: Match data
        in: body
        name: match
        required: true
        schema:
          $ref: '#/definitions/models.Match'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a match
      tags:
      - Match
  /matchs/{matchId}:
    get:
      consumes:
      - application/json
      description: Get a match with the given ID.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Match ID
        in: path
        name: matchId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Match'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth®: []
      summary: Get a match
      tags:
      - Match
  /matchs/between-users:
    get:
      consumes:
      - application/json
      description: Get matches between users.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Player1 ID
        in: query
        name: Player1ID
        required: true
        type: integer
      - description: Player2 ID
        in: query
        name: PlayerID2
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get matches between users
      tags:
      - Match
  /matchs/update/score:
    post:
      consumes:
      - application/json
      description: Update score.
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Match ID
        in: formData
        name: matchId
        required: true
        type: string
      - description: User ID
        in: formData
        name: userId
        required: true
        type: string
      - description: Score
        in: formData
        name: score
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update score
      tags:
      - Match
  /register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: User Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.NewUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Register
      tags:
      - Auth
  /tags:
    get:
      consumes:
      - application/json
      description: Get all tags.
      parameters:
      - description: Add trendy games to the response
        in: query
        name: WithTrendy
        type: boolean
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all tags
      tags:
      - Tag
    post:
      consumes:
      - application/json
      description: Create a tag
      parameters:
      - description: Tag object that needs to be created
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/models.CreateTagPayload'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tag'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a tag
      tags:
      - Tag
  /tournaments:
    get:
      consumes:
      - application/json
      description: Get all tournaments
      parameters:
      - description: Add recent tournaments to the response
        in: query
        name: WithRecents
        type: boolean
      - description: Search by userID
        in: query
        name: UserID
        type: integer
      - description: Search by gameID
        in: query
        name: GameID
        type: integer
      - description: Search by name
        in: query
        name: Name
        type: string
      - description: Sort order (use 'start_date' for ascending order, '-start_date'
          for descending order)
        in: query
        name: Sort
        type: string
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all tournaments
      tags:
      - tournament
    post:
      consumes:
      - multipart/form-data
      description: Create a new tournament
      parameters:
      - description: Tournament name
        example: '"My Tournament"'
        in: formData
        name: name
        required: true
        type: string
      - description: Tournament description
        example: '"Description of my tournament"'
        in: formData
        name: description
        required: true
        type: string
      - description: Tournament start date
        example: '"2024-04-12T00:00:00Z"'
        in: formData
        name: start_date
        required: true
        type: string
      - description: Tournament end date
        example: '"2024-04-15T00:00:00Z"'
        in: formData
        name: end_date
        required: true
        type: string
      - description: Organizer ID
        example: 1
        in: formData
        name: organizer_id
        required: true
        type: integer
      - description: Game ID
        example: 1
        in: formData
        name: game_id
        required: true
        type: integer
      - description: Number of rounds
        example: 3
        in: formData
        name: rounds
        required: true
        type: integer
      - collectionFormat: multi
        description: Array of tag IDs
        in: formData
        items:
          type: integer
        name: tagsIDs[]
        required: true
        type: array
      - description: Image file
        in: formData
        name: image
        required: true
        type: file
      - description: Location
        example: '"New York"'
        in: formData
        name: location
        required: true
        type: string
      - description: Maximum number of players
        example: 32
        in: formData
        name: max_players
        required: true
        type: integer
      - description: Longitude
        example: 40.7128
        in: formData
        name: longitude
        required: true
        type: number
      - description: Latitude
        example: 74.006
        in: formData
        name: latitude
        required: true
        type: number
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tournament'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new tournament
      tags:
      - tournament
  /tournaments/{id}:
    get:
      consumes:
      - application/json
      description: Get a tournament
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Tournament'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a tournament
      tags:
      - tournament
  /tournaments/{id}/generate-matches:
    post:
      consumes:
      - application/json
      description: Generate matches for a tournament
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Generate matches for a tournament
      tags:
      - tournament
  /tournaments/{id}/matches:
    get:
      consumes:
      - application/json
      description: Get all matches of a tournament
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all matches of a tournament
      tags:
      - tournament
  /tournaments/{id}/register/{userID}:
    post:
      consumes:
      - application/json
      description: Register a user to a tournament
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      - description: Status
        example: s
        in: query
        name: Status
        type: string
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Register a user to a tournament
      tags:
      - tournament
  /tournaments/{id}/start:
    post:
      consumes:
      - application/json
      description: Start a tournament
      parameters:
      - description: Tournament ID
        in: path
        name: id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth ini: []
      summary: Start a tournament
      tags:
      - tournament
  /tournaments/rankings:
    get:
      consumes:
      - application/json
      description: Get the ranking of a tournament
      parameters:
      - description: Tournament ID
        in: query
        name: TournamentID
        type: integer
      - description: User ID
        in: query
        name: UserID
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get the ranking of a tournament
      tags:
      - tournament
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: Filter by isVerified
        in: query
        name: isVerified
        type: string
      - description: Sort by
        in: query
        name: sort
        type: string
      - description: Filter by role
        in: query
        name: role
        type: string
      - description: Filter by country
        in: query
        name: country
        type: string
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: User Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.User'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.NewUserPayload'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a user
      tags:
      - User
  /users/{UserID}/stats:
    get:
      consumes:
      - application/json
      description: Get user stats
      parameters:
      - description: User ID
        in: path
        name: UserID
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserStats'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user stats
      tags:
      - User
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: User Payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.User'
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - User
  /users/{id}/upload/picture:
    post:
      consumes:
      - multipart/form-data
      description: Upload a picture
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Image file
        in: formData
        name: image
        required: true
        type: file
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload a picture
      tags:
      - User
  /users/ranks:
    get:
      consumes:
      - application/json
      description: Get users ranks
      parameters:
      - default: Bearer <Add access token here>
        description: Insert your access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserRanking'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get users ranks
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
