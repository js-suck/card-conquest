// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: tournament.proto

package authentication_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TournamentService_SuscribeTournamentUpdate_FullMethodName = "/protos.TournamentService/SuscribeTournamentUpdate"
)

// TournamentServiceClient is the client API for TournamentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TournamentServiceClient interface {
	SuscribeTournamentUpdate(ctx context.Context, in *TournamentRequest, opts ...grpc.CallOption) (TournamentService_SuscribeTournamentUpdateClient, error)
}

type tournamentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTournamentServiceClient(cc grpc.ClientConnInterface) TournamentServiceClient {
	return &tournamentServiceClient{cc}
}

func (c *tournamentServiceClient) SuscribeTournamentUpdate(ctx context.Context, in *TournamentRequest, opts ...grpc.CallOption) (TournamentService_SuscribeTournamentUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &TournamentService_ServiceDesc.Streams[0], TournamentService_SuscribeTournamentUpdate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tournamentServiceSuscribeTournamentUpdateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TournamentService_SuscribeTournamentUpdateClient interface {
	Recv() (*TournamentResponse, error)
	grpc.ClientStream
}

type tournamentServiceSuscribeTournamentUpdateClient struct {
	grpc.ClientStream
}

func (x *tournamentServiceSuscribeTournamentUpdateClient) Recv() (*TournamentResponse, error) {
	m := new(TournamentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TournamentServiceServer is the server API for TournamentService service.
// All implementations must embed UnimplementedTournamentServiceServer
// for forward compatibility
type TournamentServiceServer interface {
	SuscribeTournamentUpdate(*TournamentRequest, TournamentService_SuscribeTournamentUpdateServer) error
	mustEmbedUnimplementedTournamentServiceServer()
}

// UnimplementedTournamentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTournamentServiceServer struct {
}

func (UnimplementedTournamentServiceServer) SuscribeTournamentUpdate(*TournamentRequest, TournamentService_SuscribeTournamentUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method SuscribeTournamentUpdate not implemented")
}
func (UnimplementedTournamentServiceServer) mustEmbedUnimplementedTournamentServiceServer() {}

// UnsafeTournamentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TournamentServiceServer will
// result in compilation errors.
type UnsafeTournamentServiceServer interface {
	mustEmbedUnimplementedTournamentServiceServer()
}

func RegisterTournamentServiceServer(s grpc.ServiceRegistrar, srv TournamentServiceServer) {
	s.RegisterService(&TournamentService_ServiceDesc, srv)
}

func _TournamentService_SuscribeTournamentUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TournamentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TournamentServiceServer).SuscribeTournamentUpdate(m, &tournamentServiceSuscribeTournamentUpdateServer{stream})
}

type TournamentService_SuscribeTournamentUpdateServer interface {
	Send(*TournamentResponse) error
	grpc.ServerStream
}

type tournamentServiceSuscribeTournamentUpdateServer struct {
	grpc.ServerStream
}

func (x *tournamentServiceSuscribeTournamentUpdateServer) Send(m *TournamentResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TournamentService_ServiceDesc is the grpc.ServiceDesc for TournamentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TournamentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.TournamentService",
	HandlerType: (*TournamentServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SuscribeTournamentUpdate",
			Handler:       _TournamentService_SuscribeTournamentUpdate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tournament.proto",
}
